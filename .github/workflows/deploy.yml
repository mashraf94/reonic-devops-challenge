name: Deploy CDK Stack

on:
  push:
    branches: [main, dev]

jobs:
  demo-app-bap:
    runs-on: ubuntu-latest
    outputs:
      demo-image-uri: ${{ steps.build-image.outputs.image }}
      demo-image-sha: ${{ steps.build-image.outputs.image-sha }}
      demo-ecr-repo: ${{ steps.set-stage.outputs.ecr_repo }}
      stage: ${{ steps.set-stage.outputs.stage }}
      aws-region: ${{ steps.set-stage.outputs.aws_region }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set stage based on branch
        id: set-stage
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "stage=prod" >> $GITHUB_OUTPUT
            echo "ecr_repo=reonic-demo-prod" >> $GITHUB_OUTPUT
            echo "aws_region=${{ vars.PROD_AWS_REGION }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "stage=dev" >> $GITHUB_OUTPUT
            echo "ecr_repo=reonic-demo-dev" >> $GITHUB_OUTPUT
            echo "aws_region=${{ vars.DEV_AWS_REGION }}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.set-stage.outputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        env:
          ECR_REPOSITORY: ${{ steps.set-stage.outputs.ecr_repo }}
          AWS_REGION: ${{ steps.set-stage.outputs.aws_region }}
        run: |
          # Check if ECR repository exists, create if it doesn't
          if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION >/dev/null 2>&1; then
            echo "ECR repository $ECR_REPOSITORY does not exist. Creating..."
            aws ecr create-repository \
              --repository-name $ECR_REPOSITORY \
              --region $AWS_REGION \
              --image-scanning-configuration scanOnPush=true
            echo "ECR repository $ECR_REPOSITORY created successfully"
          else
            echo "ECR repository $ECR_REPOSITORY already exists"
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.set-stage.outputs.ecr_repo }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image-sha=$IMAGE_TAG" >> $GITHUB_OUTPUT

          # Also tag as latest for convenience
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    runs-on: ubuntu-latest
    needs: demo-app-bap

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.demo-app-bap.outputs.aws-region }}

      - name: Install dependencies
        run: |
          npm install -g aws-cdk
          npm run install:all
          echo "${{ needs.demo-app-bap.outputs.image-uri }}"
          echo "${{ needs.demo-app-bap.outputs.image-sha }}"

      - name: Build application
        run: npm run build

      - name: Deploy CDK stack
        run: |
          cd cdk
          echo "Deploying to ${{ needs.demo-app-bap.outputs.stage }} environment in region ${{ needs.demo-app-bap.outputs.aws-region }}"
          cdk deploy "${{ needs.demo-app-bap.outputs.stage }}/**" --require-approval never
        env:
          AWS_REGION: ${{ needs.demo-app-bap.outputs.aws-region }}
          DEMO_IMAGE_SHA: ${{ needs.demo-app-bap.outputs.demo-image-sha }}
          DEMO_ECR_REPO: ${{ needs.demo-app-bap.outputs.demo-ecr-repo }}
